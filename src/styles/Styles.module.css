:root {
  --color-black: 0, 0, 0;
  --color-error: 210, 50, 50;
  --color-white: 255, 255, 255;
  --primary-color: 25, 120, 210;
  --primary-color-dark: 20, 100, 190;
}

.Article {
  margin: 0;
  padding: 0;
}

.Box {
  margin: 0;
  padding: 0;
}

.Button {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  box-sizing: border-box;
  margin: 0 0.25rem;
  padding: 0.375rem 1rem;
  border: 0 solid transparent;
  border-radius: 0.25rem;
  outline: none;
  box-shadow: none;
  position: relative;
  overflow: hidden;
  vertical-align: middle;
  background-color: transparent;
  color: inherit;
  font-weight: 500;
  font-size: inherit;
  line-height: inherit;
  font-family: inherit;
  letter-spacing: inherit;
  word-spacing: inherit;
  text-decoration: none;
  transition-duration: 250ms;
  transition-property: none;
  transition-timing-function: var(--btn-timing-func);
  cursor: pointer;
  user-select: none;
  appearance: none;
  -webkit-tap-highlight-color: transparent;
  -webkit-box-align: center;
  -webkit-box-pack: center;

  --btn-color-black-a125: rgba(var(--color-black, 0, 0, 0), 0.125);
  --btn-color-black-a25: rgba(var(--color-black, 0, 0, 0), 0.25);
  --btn-color-mix-a50: color-mix(in srgb, currentcolor 50%, transparent);
  --btn-color-mix-a05: color-mix(in srgb, currentcolor 5%, transparent);
  --btn-color-white: rgb(var(--color-white, 255, 255, 255));
  --btn-primary-color: rgb(var(--primary-color, 25, 120, 210));
  --btn-primary-color-dark: rgb(var(--primary-color-dark, 20, 100, 190));
  --btn-timing-func: cubic-bezier(0.4, 0, 0.2, 1);

  * {
    pointer-events: none;
  }

  .Icon {
    display: inherit;
    margin: 0 0.5rem;
    color: inherit;

    svg {
      width: 1em;
      height: 1em;
      stroke: currentcolor;
      fill: currentcolor;
    }
  }

  .IconEnd {
    margin: 0 0 0 0.5rem;
  }

  .IconStart {
    margin: 0 0.5rem 0 0;
  }

  .Ripple {
    border-radius: inherit;
    position: absolute;
    inset: 0;
    z-index: 0;
    overflow: hidden;
    background-color: transparent;

    span {
      border-radius: 50%;
      position: absolute;
      inset: 0;
      background-color: currentcolor;
      opacity: 0;
      transform: scale(0);

      &.Click {
        animation: RippleClick 350ms linear forwards;
      }

      &.Focus {
        animation:
          RippleVisible 200ms var(--btn-timing-func) 0ms forwards,
          RipplePulse 2500ms infinite var(--btn-timing-func) 200ms;
      }
    }
  }

  &.Fill {
    box-shadow:
      rgba(0, 0, 0, 0.2) 0px 3px 1px -2px,
      rgba(0, 0, 0, 0.14) 0px 2px 2px 0px,
      rgba(0, 0, 0, 0.12) 0px 1px 5px 0px;
    background-color: var(--btn-primary-color);
    color: var(--btn-color-white);
    line-height: 1.75;
    transition-property: box-shadow, background-color;

    &:not(.Disabled):hover {
      box-shadow:
        rgba(0, 0, 0, 0.2) 0px 2px 4px -1px,
        rgba(0, 0, 0, 0.14) 0px 4px 5px 0px,
        rgba(0, 0, 0, 0.12) 0px 1px 10px 0px;
      background-color: var(--btn-primary-color-dark);
      text-decoration: none !important;
    }

    &:focus,
    &:focus-visible {
      box-shadow:
        rgba(0, 0, 0, 0.2) 0px 3px 5px -1px,
        rgba(0, 0, 0, 0.14) 0px 6px 10px 0px,
        rgba(0, 0, 0, 0.12) 0px 1px 18px 0px;
    }

    &.Disabled {
      box-shadow: none;
      background-color: var(--btn-color-black-a125);
      color: var(--btn-color-black-a25);
    }
  }

  &.Outline {
    border: 1px solid var(--btn-color-mix-a50);
    color: var(--btn-primary-color);
    line-height: 1.75;
    transition-property: border-color, background-color, color;

    &:not(.Disabled):hover {
      border-color: var(--btn-primary-color);
      background-color: var(--btn-color-mix-a05);
      color: var(--btn-primary-color-dark);
      text-decoration: none !important;
    }

    &.Disabled {
      border: 1px solid var(--btn-color-black-a125);
      color: var(--btn-color-black-a25);
    }
  }

  &.Underline {
    margin: 0;
    padding: 0;
    border-radius: 0;
    vertical-align: inherit;
    color: var(--btn-primary-color);
    transition-property: background-color, color;
    user-select: inherit;

    .Ripple {
      border-bottom: 1px dotted var(--btn-color-mix-a50);
      overflow: visible;

      &::before {
        width: 100%;
        height: 1px;
        position: absolute;
        right: 0;
        bottom: -1px;
        background-color: var(--btn-primary-color);
        transition: transform 200ms cubic-bezier(0, 0, 0.2, 1);
        content: "";
        transform: scaleX(0);
        transform-origin: left;
      }
    }

    &:not(.Disabled):hover {
      background-color: var(--btn-color-mix-a05);
      color: var(--btn-primary-color-dark);

      .Ripple::before {
        transform: scaleX(1);
      }
    }

    &.Disabled {
      color: var(--btn-color-black-a25);

      .Ripple {
        border-bottom: 1px dotted var(--btn-color-black-a125);
      }
    }
  }

  &.Text {
    margin: 0;
    padding: 0;
    vertical-align: inherit;
    color: var(--btn-primary-color);
    transition-property: background-color;
    user-select: inherit;

    &:not(.Disabled):hover {
      background-color: var(--btn-color-mix-a05);
      color: var(--btn-primary-color-dark);
      text-decoration: none !important;
    }

    &.Disabled {
      color: var(--btn-color-black-a25);
    }
  }

  &.IconButton {
    padding: 0.75rem;
    border-radius: 50%;

    svg {
      width: 1em;
      height: 1em;
      stroke: currentcolor;
      fill: currentcolor;
    }

    .Ripple {
      span.Focus {
        animation:
          IconRippleVisible 200ms var(--btn-timing-func) 0ms forwards,
          IconRipplePulse 2500ms infinite var(--btn-timing-func) 200ms;
      }
    }

    &.Text {
      margin: -1rem -0.125rem -0.75rem;
      position: relative;
      top: 0.125rem;
      vertical-align: baseline;
    }
  }

  &.Disabled {
    cursor: default;
  }
}

.Center {
  text-align: center;
}

.Container {
  margin: 0;
  padding: 0;
}

.Form {
  display: flex;
  gap: 1em;
  flex-direction: column;
}

.H1,
.H2,
.H3,
.H4,
.H5,
.H6 {
  margin: 0;
  padding: 0;
}

.InputController {
  display: inline-flex;
  flex-direction: column;
  min-width: 0;
  margin: 0;
  padding: 0;
  position: relative;
  vertical-align: top;

  --fld-color-black-a06: rgba(var(--color-black, 0, 0, 0), 0.06);
  --fld-color-black-a09: rgba(var(--color-black, 0, 0, 0), 0.09);
  --fld-color-black-a25: rgba(var(--color-black, 0, 0, 0), 0.25);
  --fld-color-black-a45: rgba(var(--color-black, 0, 0, 0), 0.45);
  --fld-color-black-a6: rgba(var(--color-black, 0, 0, 0), 0.6);
  --fld-color-black-a75: rgba(var(--color-black, 0, 0, 0), 0.75);
  --fld-color-error: rgb(var(--color-error, 210, 50, 50));
  --fld-color-mix-a75: color-mix(in srgb, currentcolor 75%, transparent);
  --fld-primary-color: rgb(var(--primary-color, 25, 120, 210));
  --fld-timing-func: cubic-bezier(0, 0, 0.2, 1);

  button[type="reset"],
  button[type="submit"] {
    margin: 0;
    padding: 0.625em 2em;
  }

  .InputLabel {
    display: block;
    max-width: calc(100% - 1.5em);
    position: absolute;
    top: 0;
    left: 0;
    z-index: 1;
    overflow: hidden;
    color: var(--fld-color-black-a6);
    white-space: nowrap;
    text-overflow: ellipsis;
    transition:
      color 200ms var(--fld-timing-func),
      transform 200ms var(--fld-timing-func),
      max-width 200ms var(--fld-timing-func);
    pointer-events: none;
    transform-origin: top left;
    transform: translate(1em, 1em) scale(1);
  }

  .InputContainer {
    display: inline-flex;
    align-items: center;
    box-sizing: border-box;
    position: relative;
    font-weight: 400;
    font-size: 1rem;

    .Input,
    .TextArea {
      display: block;
      box-sizing: content-box;
      width: 100%;
      min-width: 0;
      margin: 0;
      padding: 0.5em 0.875em;
      border: 0;
      outline: none;
      background: none;
      color: currentcolor;
      font: inherit;
      line-height: normal;
      letter-spacing: inherit;

      &::placeholder {
        opacity: 0.75;
      }
    }

    .TextArea {
      min-height: 1.1875em;
      overflow-y: auto;
      line-height: 1.75;
      resize: none;
    }

    .PasswordEye,
    .Search {
      display: inline-flex;
      margin: -0.5em;
      padding: 0.5em;
      border: 0;
      position: absolute;
      top: 0.375em;
      right: 0.5em;
      vertical-align: middle;
      color: var(--fld-color-mix-a75);
      font-size: 1.25em;
      user-select: none;
    }

    .Empty {
      display: inline-block;
      width: 1em;
      height: 1em;
    }

    &:has(.PasswordEye),
    &:has(.Search) {
      .Input {
        padding-right: 2.5em !important;
      }
    }
  }

  .InputHelper {
    margin: 0.5em 1.25em 0 1.25em;
    color: var(--fld-color-mix-a75);
    font-size: 0.75em;
    text-align: left;
  }

  &.Focus {
    .InputLabel {
      color: var(--fld-primary-color);
    }
  }

  &.Error {
    .InputLabel,
    .InputHelper {
      color: var(--fld-color-error);
    }
  }

  &.Fill,
  &.Underline {
    .InputContainer {
      &::before {
        border-bottom: 1px solid var(--fld-color-black-a25);
        position: absolute;
        right: 0;
        bottom: 0;
        left: 0;
        content: "\00a0";
        pointer-events: none;
      }

      &::after {
        border-bottom: 2px solid var(--fld-primary-color);
        position: absolute;
        right: 0;
        bottom: 0;
        left: 0;
        transition: transform 200ms var(--fld-timing-func);
        content: "";
        pointer-events: none;
        transform: scaleX(0);
        transform-origin: left bottom;
      }
    }

    &:not(.Disabled):not(.Error):hover {
      .InputContainer {
        &::before {
          border-bottom: 1px solid var(--fld-color-black-a75);
        }
      }
    }

    &.Focus {
      .InputContainer {
        &::after {
          transform: scaleX(1) translate(0);
        }
      }
    }

    &.Error {
      .InputContainer {
        &::before,
        &::after {
          border-bottom-color: var(--fld-color-error);
        }
      }
    }
  }

  &.Fill {
    .InputContainer {
      border-radius: 0.25em 0.25em 0 0;
      background-color: var(--fld-color-black-a06);
      transition: background-color 200ms var(--fld-timing-func);
    }

    &:has(label) {
      .InputContainer {
        .Input,
        .TextArea {
          padding: 1.5em 0.875em 0.5em 0.875em;

          &::placeholder {
            opacity: 0;
          }
        }

        .PasswordEye,
        .Search {
          top: 1.1875em;
        }
      }
    }

    &:not(.Disabled):hover {
      .InputContainer {
        background-color: var(--fld-color-black-a09);
      }
    }

    &.Filled,
    &.Focus {
      .InputLabel {
        transform: translate(0.875em, 0.375em) scale(0.75);
      }

      .InputContainer {
        .Input,
        .TextArea {
          &::placeholder {
            opacity: 0.75;
          }
        }
      }
    }
  }

  &.Outline,
  &.Standard {
    .InputContainer {
      border-radius: 0.25em;

      .FieldSet {
        min-width: 0;
        margin: 0;
        padding: 0 0.5em;
        border-width: 1px;
        border-style: solid;
        border-color: var(--fld-color-black-a25);
        border-radius: inherit;
        position: absolute;
        top: -0.25em;
        right: 0;
        bottom: 0;
        left: 0;
        overflow: hidden;
        text-align: left;
        transition: border-color 200ms var(--fld-timing-func);
        pointer-events: none;

        .Legend {
          display: block;
          box-sizing: border-box;
          width: auto;
          max-width: 0.01px;
          height: 0.6875em;
          padding: 0;
          overflow: hidden;
          float: unset;
          visibility: hidden;
          font-size: 0.875em;
          line-height: inherit;
          white-space: nowrap;
          transition: max-width 50ms var(--fld-timing-func) 0ms;

          .Span {
            letter-spacing: 0.0125em;
            white-space: nowrap;
            opacity: 0;
          }
        }
      }
    }

    &:has(label) {
      .InputContainer {
        .Input,
        .TextArea {
          padding: 1em 0.875em;

          &::placeholder {
            opacity: 0;
          }
        }

        .PasswordEye,
        .Search {
          top: 0.75em;
        }

        .FieldSet {
          top: -0.3125em;
        }
      }
    }

    &:not(.Disabled):not(.Error):not(.Focus):hover {
      .InputContainer {
        .FieldSet {
          border-color: var(--fld-color-black-a75);
        }
      }
    }

    &.Focus {
      .InputContainer {
        .FieldSet {
          border-width: 2px;
          border-color: var(--fld-primary-color);
        }
      }
    }

    &.Filled,
    &.Focus {
      .InputLabel {
        transform: translate(0.875em, -0.5625em) scale(0.75);
      }

      .InputContainer {
        .Input,
        .TextArea {
          &::placeholder {
            opacity: 0.75;
          }
        }

        .FieldSet {
          .Legend {
            max-width: 100%;
            transition: max-width 100ms var(--fld-timing-func) 50ms;
          }
        }
      }
    }

    &.Error {
      .InputContainer {
        .FieldSet {
          border-color: var(--fld-color-error);
        }
      }
    }
  }

  &.Standard {
    .InputLabel {
      display: flex;
      align-items: center;
      max-width: none;
      padding: 0.5em 0.875em;
      position: relative;
      font-weight: 500;
      transition: none;
      transform: none !important;
    }

    .InputContainer {
      .FieldSet {
        top: 0;

        .Legend {
          display: none;
        }
      }
    }

    .InputHelper {
      flex-basis: 100%;
    }

    &:has(label) {
      .InputContainer {
        .Input,
        .TextArea {
          padding: 0.5em 0.875em;

          &::placeholder {
            opacity: 0.75;
          }
        }

        .PasswordEye,
        .Search {
          top: 0.375em;
        }

        .FieldSet {
          top: 0;
        }
      }
    }

    &.Disabled {
      .InputLabel {
        opacity: 0.75;
      }
    }
  }

  &.Underline {
    .InputLabel {
      transform: translate(0, 1em) scale(1);
    }

    .InputContainer {
      .Input,
      .TextArea {
        padding: 0.25em 0 0.3125em;
      }

      .PasswordEye,
      .Search {
        top: 0.1875em;
      }
    }

    .InputHelper {
      margin: 0.5em 0 0 0;
    }

    &:has(label) {
      .InputContainer {
        margin-top: 1em;

        .Input,
        .TextArea {
          &::placeholder {
            opacity: 0;
          }
        }

        .PasswordEye,
        .Search {
          top: 0.1875em;
        }
      }
    }

    &.Filled,
    &.Focus {
      .InputLabel {
        transform: translate(0, 0) scale(0.75);
      }

      .InputContainer {
        .Input,
        .TextArea {
          &::placeholder {
            opacity: 0.75;
          }
        }
      }
    }
  }
}

.Left {
  text-align: left;
}

.P {
  margin: 0;
  padding: 0;
}

.Page {
  margin: 0;
  padding: 1em;
}

.Right {
  text-align: right;
}

.S {
  margin: 0;
  padding: 0;
  font-style: normal;
}

.Section {
  margin: 0;
  padding: 0;
}

@keyframes IconRipplePulse {
  0% {
    transform: scale(0.9);
  }

  50% {
    transform: scale(0.725);
  }

  100% {
    transform: scale(0.9);
  }
}

@keyframes IconRippleVisible {
  from {
    opacity: 0.1;
    transform: scale(0);
  }

  to {
    opacity: 0.3;
    transform: scale(0.9);
  }
}

@keyframes RippleClick {
  0% {
    opacity: 0.05;
    transform: scale(0);
  }

  35% {
    opacity: 0.25;
    transform: scale(0.5);
  }

  100% {
    opacity: 0;
    transform: scale(2);
  }
}

@keyframes RipplePulse {
  0% {
    transform: scale(0.8);
  }

  50% {
    transform: scale(0.725);
  }

  100% {
    transform: scale(0.8);
  }
}

@keyframes RippleVisible {
  from {
    opacity: 0.1;
    transform: scale(0);
  }

  to {
    opacity: 0.3;
    transform: scale(0.8);
  }
}
